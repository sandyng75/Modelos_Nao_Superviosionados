#%% Importando pacotes

import pandas as pd #manipulação de dados em formato de dataframe
import numpy as np #biblioteca para operações matemáticas multidimensionais
from scipy.stats import chi2_contingency #estatística qui-quadrado e teste
import statsmodels.api as sm #cálculo de estatísticas da tabela de contingência
from scipy.stats.contingency import margins #cálculo manual dos resíduos padronizados
import plotly.io as pio #biblioteca para gráficos interativos
pio.renderers.default = 'browser' #biblioteca para gráficos interativos
import plotly.graph_objects as go #biblioteca para gráficos interativos
from factor_analyzer import FactorAnalyzer
from factor_analyzer.factor_analyzer import calculate_bartlett_sphericity
from factor_analyzer.factor_analyzer import calculate_bartlett_sphericity
from factor_analyzer.factor_analyzer import calculate_kmo
import pingouin as pg
import seaborn as sns
import numpy as np
import matplotlib.pyplot as plt
import pingouin as pg
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.io as pio
pio.renderers.default = 'browser'
import plotly.graph_objects as go
import shapefile as shp
import scipy.cluster.hierarchy as sch
from sklearn.cluster import AgglomerativeClustering
import scipy.stats as stats
from sklearn.cluster import KMeans
import seaborn as sns

#%% Importar arquivo

df = pd.read_csv('Banco Projeto.csv', sep = ';')

#%% Criando dataframe somente com dados quanti

df_quanti = df.drop(columns=['Name', 'Grupo', 'Sexo'])

#%% Vendo quais dados estão como objeto

trocar = df_quanti.select_dtypes(include='object').columns
print(trocar)

#%% transformando para float

df_quanti['Peso D0'] = df_quanti['Peso D0'].str.replace(',', '.').astype(float)
df_quanti['Peso D60'] = df_quanti['Peso D60'].str.replace(',', '.').astype(float)
df_quanti['Peso D120'] = df_quanti['Peso D120'].str.replace(',', '.').astype(float)
df_quanti['HBA1C D0'] = df_quanti['HBA1C D0'].str.replace(',', '.').astype(float)
df_quanti['HBA1C D60'] = df_quanti['HBA1C D60'].str.replace(',', '.').astype(float)
df_quanti['HBA1C D120'] = df_quanti['HBA1C D120'].str.replace(',', '.').astype(float)
df_quanti['INS D0'] = df_quanti['INS D0'].str.replace(',', '.').astype(float)
df_quanti['INS D60'] = df_quanti['INS D60'].str.replace(',', '.').astype(float)
df_quanti['INS D120'] = df_quanti['INS D120'].str.replace(',', '.').astype(float)



#%% deletar os vazios e resetando indice

df_quanti = df_quanti.dropna()
df_quanti = df_quanti.reset_index()
del df_quanti['index']

#%% Analisar correlação entre variaveis

matriz_corr = pg.rcorr(df_quanti,
                       method = 'pearson',
                       upper = 'pval',
                       decimals = 4,
                       pval_stars={0.01:'***', 0.05:'**', 0.10: '*'})

#%% Grafico Correlação Interativo

corr = df_quanti.corr()


fig = go.Figure()
fig.add_trace(
    go.Heatmap(
        x = corr.columns,
        y = corr.index,
        z = np.array(corr),
        text=corr.values,
        texttemplate='%{text:.4f}',
        colorscale='viridis'))

fig.update_layout(
    height = 700,
    width = 700,
    yaxis=dict(autorange="reversed"))

fig.show()

#%% Teste de Bartlett

bartlett, p_value = calculate_bartlett_sphericity(df_quanti)

print(f'Bartlett statistic: {bartlett}')
print(f'p-value : {p_value}')


#%% Teste de Kaiser Olsen Meyer (KMO)

kmo_all, kmo_model = calculate_kmo(df_quanti)

print(f'kmo_model : {kmo_model}')


#%% Analise Fatorial

fa = FactorAnalyzer()
fa.fit(df_quanti)
ev,v = fa.get_eigenvalues()

fa.set_params(n_factors = 4,
              method ='principal',
              rotation = None)
fa.fit(df_quanti)




#%% Eigenvalues, variâncias e variâncias acumulada

eigen_fatores = fa.get_factor_variance()
eigen_fatores

tabela_eigen = pd.DataFrame(eigen_fatores)
tabela_eigen.columns = [f"Fator {i+1}" for i, v in enumerate(tabela_eigen.columns)]
tabela_eigen.index = ['Autovalor','Variância', 'Variância Acumulada']
tabela_eigen = tabela_eigen.T

print(tabela_eigen)

#%% Determinando as cargas fatoriais

cargas_fatores = fa.loadings_

tabela_cargas = pd.DataFrame(cargas_fatores)
tabela_cargas.columns = [f"Fator {i+1}" for i, v in enumerate(tabela_cargas.columns)]
tabela_cargas.index = df_quanti.columns
tabela_cargas

print(tabela_cargas)

#%% Determinando as comunalidades

comunalidades = fa.get_communalities()

tabela_comunalidades = pd.DataFrame(comunalidades)
tabela_comunalidades.columns = ['Comunalidades']
tabela_comunalidades.index = df_quanti.columns
tabela_comunalidades

print(tabela_comunalidades)

#%% Resultados dos fatores para as observações do dataset (predict)

predict_fatores= pd.DataFrame(fa.transform(df_quanti))
predict_fatores.columns =  [f"Fator {i+1}" for i, v in enumerate(predict_fatores.columns)]

print(predict_fatores)

# Adicionando ao dataset 

df = pd.concat([df.reset_index(drop=True), predict_fatores], axis=1)

df

#%% Identificando os scores fatoriais

scores = fa.weights_

tabela_scores = pd.DataFrame(scores)
tabela_scores.columns = [f"Fator {i+1}" for i, v in enumerate(tabela_scores.columns)]
tabela_scores.index = df_quanti.columns
tabela_scores

print(tabela_scores)

#%% Correlação entre os fatores

# A seguir, verifica-se que a correlação entre os fatores é zero (ortogonais)

corr_fator = pg.rcorr(df[['Fator 1','Fator 2','Fator 3','Fator 4']], 
                      method = 'pearson', upper = 'pval', decimals = 4, pval_stars = {0.01: '***', 0.05: '**', 0.10: '*'})
print(corr_fator)

#%% Criando um ranking

df['Ranking'] = 0

for index, item in enumerate(list(tabela_eigen.index)):
    variancia = tabela_eigen.loc[item]['Variância']

    df['Ranking'] = df['Ranking'] + df[tabela_eigen.index[index]]*variancia
    
print(df)

#%% Gráfico das cargas fatoriais e suas variâncias nos componentes principais

import matplotlib.pyplot as plt

plt.figure(figsize=(12,8))

tabela_cargas_chart = tabela_cargas.reset_index()

plt.scatter(tabela_cargas_chart['Fator 1'], tabela_cargas_chart['Fator 2'], s=30)

def label_point(x, y, val, ax):
    a = pd.concat({'x': x, 'y': y, 'val': val}, axis=1)
    for i, point in a.iterrows():
        ax.text(point['x'] + 0.05, point['y'], point['val'])

label_point(x = tabela_cargas_chart['Fator 1'],
            y = tabela_cargas_chart['Fator 2'],
            val = tabela_cargas_chart['index'],
            ax = plt.gca()) 

plt.axhline(y=0, color='black', ls='--')
plt.axvline(x=0, color='black', ls='--')
plt.ylim([-1.5,1.5])
plt.xlim([-1.5,1.5])
plt.title(f"{tabela_eigen.shape[0]} componentes principais que explicam {round(tabela_eigen['Variância'].sum()*100,2)}% da variância", fontsize=14)
plt.xlabel(f"PC 1: {round(tabela_eigen.iloc[0]['Variância']*100,2)}% de variância explicada", fontsize=14)
plt.ylabel(f"PC 2: {round(tabela_eigen.iloc[1]['Variância']*100,2)}% de variância explicada", fontsize=14)
plt.show()


#%% Gráfico da variância acumulada dos componentes principais

plt.figure(figsize=(12,8))

plt.title(f"{tabela_eigen.shape[0]} componentes principais que explicam {round(tabela_eigen['Variância'].sum()*100,2)}% da variância", fontsize=14)
sns.barplot(x=tabela_eigen.index, y=tabela_eigen['Variância'], data=tabela_eigen, color='green')
plt.xlabel("Componentes principais", fontsize=14)
plt.ylabel("Porcentagem de variância explicada", fontsize=14)
plt.show()


#%% FIM
